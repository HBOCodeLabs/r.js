{"version":3,"file":"built.js","sources":["text/text.js","../app/sample.txt!text","../app/a.js","../app/main.js","../app.js"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/text for details\r\n */\r\n/*jslint regexp: true */\r\n/*global require, XMLHttpRequest, ActiveXObject,\r\n  define, window, process, Packages,\r\n  java, location, Components, FileUtils */\r\n\r\ndefine('text',['module'], function (module) {\r\n    'use strict';\r\n\r\n    var text, fs, Cc, Ci, xpcIsWindows,\r\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\r\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        hasLocation = typeof location !== 'undefined' && location.href,\r\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\r\n        defaultHostName = hasLocation && location.hostname,\r\n        defaultPort = hasLocation && (location.port || undefined),\r\n        buildMap = {},\r\n        masterConfig = (module.config && module.config()) || {};\r\n\r\n    text = {\r\n        version: '2.0.10',\r\n\r\n        strip: function (content) {\r\n            //Strips <?xml ...?> declarations so that external SVG and XML\r\n            //documents can be added to a document without worry. Also, if the string\r\n            //is an HTML document, only the part inside the body tag is returned.\r\n            if (content) {\r\n                content = content.replace(xmlRegExp, \"\");\r\n                var matches = content.match(bodyRegExp);\r\n                if (matches) {\r\n                    content = matches[1];\r\n                }\r\n            } else {\r\n                content = \"\";\r\n            }\r\n            return content;\r\n        },\r\n\r\n        jsEscape: function (content) {\r\n            return content.replace(/(['\\\\])/g, '\\\\$1')\r\n                .replace(/[\\f]/g, \"\\\\f\")\r\n                .replace(/[\\b]/g, \"\\\\b\")\r\n                .replace(/[\\n]/g, \"\\\\n\")\r\n                .replace(/[\\t]/g, \"\\\\t\")\r\n                .replace(/[\\r]/g, \"\\\\r\")\r\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\r\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\r\n        },\r\n\r\n        createXhr: masterConfig.createXhr || function () {\r\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\r\n            var xhr, i, progId;\r\n            if (typeof XMLHttpRequest !== \"undefined\") {\r\n                return new XMLHttpRequest();\r\n            } else if (typeof ActiveXObject !== \"undefined\") {\r\n                for (i = 0; i < 3; i += 1) {\r\n                    progId = progIds[i];\r\n                    try {\r\n                        xhr = new ActiveXObject(progId);\r\n                    } catch (e) {}\r\n\r\n                    if (xhr) {\r\n                        progIds = [progId];  // so faster next time\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        /**\r\n         * Parses a resource name into its component parts. Resource names\r\n         * look like: module/name.ext!strip, where the !strip part is\r\n         * optional.\r\n         * @param {String} name the resource name\r\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\r\n         * where strip is a boolean.\r\n         */\r\n        parseName: function (name) {\r\n            var modName, ext, temp,\r\n                strip = false,\r\n                index = name.indexOf(\".\"),\r\n                isRelative = name.indexOf('./') === 0 ||\r\n                             name.indexOf('../') === 0;\r\n\r\n            if (index !== -1 && (!isRelative || index > 1)) {\r\n                modName = name.substring(0, index);\r\n                ext = name.substring(index + 1, name.length);\r\n            } else {\r\n                modName = name;\r\n            }\r\n\r\n            temp = ext || modName;\r\n            index = temp.indexOf(\"!\");\r\n            if (index !== -1) {\r\n                //Pull off the strip arg.\r\n                strip = temp.substring(index + 1) === \"strip\";\r\n                temp = temp.substring(0, index);\r\n                if (ext) {\r\n                    ext = temp;\r\n                } else {\r\n                    modName = temp;\r\n                }\r\n            }\r\n\r\n            return {\r\n                moduleName: modName,\r\n                ext: ext,\r\n                strip: strip\r\n            };\r\n        },\r\n\r\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\r\n\r\n        /**\r\n         * Is an URL on another domain. Only works for browser use, returns\r\n         * false in non-browser environments. Only used to know if an\r\n         * optimized .js version of a text resource should be loaded\r\n         * instead.\r\n         * @param {String} url\r\n         * @returns Boolean\r\n         */\r\n        useXhr: function (url, protocol, hostname, port) {\r\n            var uProtocol, uHostName, uPort,\r\n                match = text.xdRegExp.exec(url);\r\n            if (!match) {\r\n                return true;\r\n            }\r\n            uProtocol = match[2];\r\n            uHostName = match[3];\r\n\r\n            uHostName = uHostName.split(':');\r\n            uPort = uHostName[1];\r\n            uHostName = uHostName[0];\r\n\r\n            return (!uProtocol || uProtocol === protocol) &&\r\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\r\n                   ((!uPort && !uHostName) || uPort === port);\r\n        },\r\n\r\n        finishLoad: function (name, strip, content, onLoad) {\r\n            content = strip ? text.strip(content) : content;\r\n            if (masterConfig.isBuild) {\r\n                buildMap[name] = content;\r\n            }\r\n            onLoad(content);\r\n        },\r\n\r\n        load: function (name, req, onLoad, config) {\r\n            //Name has format: some.module.filext!strip\r\n            //The strip part is optional.\r\n            //if strip is present, then that means only get the string contents\r\n            //inside a body tag in an HTML string. For XML/SVG content it means\r\n            //removing the <?xml ...?> declarations so the content can be inserted\r\n            //into the current doc without problems.\r\n\r\n            // Do not bother with the work if a build and text will\r\n            // not be inlined.\r\n            if (config.isBuild && !config.inlineText) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            masterConfig.isBuild = config.isBuild;\r\n\r\n            var parsed = text.parseName(name),\r\n                nonStripName = parsed.moduleName +\r\n                    (parsed.ext ? '.' + parsed.ext : ''),\r\n                url = req.toUrl(nonStripName),\r\n                useXhr = (masterConfig.useXhr) ||\r\n                         text.useXhr;\r\n\r\n            // Do not load if it is an empty: url\r\n            if (url.indexOf('empty:') === 0) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            //Load the text. Use XHR if possible and in a browser.\r\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\r\n                text.get(url, function (content) {\r\n                    text.finishLoad(name, parsed.strip, content, onLoad);\r\n                }, function (err) {\r\n                    if (onLoad.error) {\r\n                        onLoad.error(err);\r\n                    }\r\n                });\r\n            } else {\r\n                //Need to fetch the resource across domains. Assume\r\n                //the resource has been optimized into a JS module. Fetch\r\n                //by the module name + extension, but do not include the\r\n                //!strip part to avoid file system issues.\r\n                req([nonStripName], function (content) {\r\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\r\n                                    parsed.strip, content, onLoad);\r\n                });\r\n            }\r\n        },\r\n\r\n        write: function (pluginName, moduleName, write, config) {\r\n            if (buildMap.hasOwnProperty(moduleName)) {\r\n                var content = text.jsEscape(buildMap[moduleName]);\r\n                write.asModule(pluginName + \"!\" + moduleName,\r\n                               \"define(function () { return '\" +\r\n                                   content +\r\n                               \"';});\\n\");\r\n            }\r\n        },\r\n\r\n        writeFile: function (pluginName, moduleName, req, write, config) {\r\n            var parsed = text.parseName(moduleName),\r\n                extPart = parsed.ext ? '.' + parsed.ext : '',\r\n                nonStripName = parsed.moduleName + extPart,\r\n                //Use a '.js' file name so that it indicates it is a\r\n                //script that can be loaded across domains.\r\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\r\n\r\n            //Leverage own load() method to load plugin value, but only\r\n            //write out values that do not have the strip argument,\r\n            //to avoid any potential issues with ! in file names.\r\n            text.load(nonStripName, req, function (value) {\r\n                //Use own write() method to construct full module value.\r\n                //But need to create shell that translates writeFile's\r\n                //write() to the right interface.\r\n                var textWrite = function (contents) {\r\n                    return write(fileName, contents);\r\n                };\r\n                textWrite.asModule = function (moduleName, contents) {\r\n                    return write.asModule(moduleName, fileName, contents);\r\n                };\r\n\r\n                text.write(pluginName, nonStripName, textWrite, config);\r\n            }, config);\r\n        }\r\n    };\r\n\r\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\r\n            typeof process !== \"undefined\" &&\r\n            process.versions &&\r\n            !!process.versions.node &&\r\n            !process.versions['node-webkit'])) {\r\n        //Using special require.nodeRequire, something added by r.js.\r\n        fs = require.nodeRequire('fs');\r\n\r\n        text.get = function (url, callback, errback) {\r\n            try {\r\n                var file = fs.readFileSync(url, 'utf8');\r\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\r\n                if (file.indexOf('\\uFEFF') === 0) {\r\n                    file = file.substring(1);\r\n                }\r\n                callback(file);\r\n            } catch (e) {\r\n                errback(e);\r\n            }\r\n        };\r\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\r\n            text.createXhr())) {\r\n        text.get = function (url, callback, errback, headers) {\r\n            var xhr = text.createXhr(), header;\r\n            xhr.open('GET', url, true);\r\n\r\n            //Allow plugins direct access to xhr headers\r\n            if (headers) {\r\n                for (header in headers) {\r\n                    if (headers.hasOwnProperty(header)) {\r\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Allow overrides specified in config\r\n            if (masterConfig.onXhr) {\r\n                masterConfig.onXhr(xhr, url);\r\n            }\r\n\r\n            xhr.onreadystatechange = function (evt) {\r\n                var status, err;\r\n                //Do not explicitly handle errors, those should be\r\n                //visible via console output in the browser.\r\n                if (xhr.readyState === 4) {\r\n                    status = xhr.status;\r\n                    if (status > 399 && status < 600) {\r\n                        //An http 4xx or 5xx error. Signal an error.\r\n                        err = new Error(url + ' HTTP status: ' + status);\r\n                        err.xhr = xhr;\r\n                        errback(err);\r\n                    } else {\r\n                        callback(xhr.responseText);\r\n                    }\r\n\r\n                    if (masterConfig.onXhrComplete) {\r\n                        masterConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(null);\r\n        };\r\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\r\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\r\n        //Why Java, why is this so awkward?\r\n        text.get = function (url, callback) {\r\n            var stringBuffer, line,\r\n                encoding = \"utf-8\",\r\n                file = new java.io.File(url),\r\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\r\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\r\n                content = '';\r\n            try {\r\n                stringBuffer = new java.lang.StringBuffer();\r\n                line = input.readLine();\r\n\r\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\r\n                // http://www.unicode.org/faq/utf_bom.html\r\n\r\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\r\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\r\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\r\n                    // Eat the BOM, since we've already found the encoding on this file,\r\n                    // and we plan to concatenating this buffer with others; the BOM should\r\n                    // only appear at the top of a file.\r\n                    line = line.substring(1);\r\n                }\r\n\r\n                if (line !== null) {\r\n                    stringBuffer.append(line);\r\n                }\r\n\r\n                while ((line = input.readLine()) !== null) {\r\n                    stringBuffer.append(lineSeparator);\r\n                    stringBuffer.append(line);\r\n                }\r\n                //Make sure we return a JavaScript string and not a Java string.\r\n                content = String(stringBuffer.toString()); //String\r\n            } finally {\r\n                input.close();\r\n            }\r\n            callback(content);\r\n        };\r\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\r\n            typeof Components !== 'undefined' && Components.classes &&\r\n            Components.interfaces)) {\r\n        //Avert your gaze!\r\n        Cc = Components.classes,\r\n        Ci = Components.interfaces;\r\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\r\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\r\n\r\n        text.get = function (url, callback) {\r\n            var inStream, convertStream, fileObj,\r\n                readData = {};\r\n\r\n            if (xpcIsWindows) {\r\n                url = url.replace(/\\//g, '\\\\');\r\n            }\r\n\r\n            fileObj = new FileUtils.File(url);\r\n\r\n            //XPCOM, you so crazy\r\n            try {\r\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\r\n                           .createInstance(Ci.nsIFileInputStream);\r\n                inStream.init(fileObj, 1, 0, false);\r\n\r\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\r\n                                .createInstance(Ci.nsIConverterInputStream);\r\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\r\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\r\n\r\n                convertStream.readString(inStream.available(), readData);\r\n                convertStream.close();\r\n                inStream.close();\r\n                callback(readData.value);\r\n            } catch (e) {\r\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\r\n            }\r\n        };\r\n    }\r\n    return text;\r\n});\r\n","\ndefine('text!app/sample.txt',[],function () { return 'sample\\n\\n';});\n","/**\r\n * Module A\r\n */\r\ndefine('app/a',{\r\n    name: 'a',\r\n    doSomething: function (name) {\r\n        console.log('Hello ' + name);\r\n    }\r\n});\r\nconsole.log('a is done');\r\n","define('app/main',['require','text!./sample.txt','./a'],function (require) {\r\n    var text = require('text!./sample.txt'),\r\n        a = require('./a');\r\n\r\n    return {\r\n        name: 'main',\r\n        a: a,\r\n        text: text \r\n    };\r\n});\r\n\r\n","require.config({\r\n    baseUrl: 'js/lib',\r\n    paths: {\r\n        app: '../app',\r\n        text: 'text/text'\r\n    }\r\n});\r\n\r\n/**\r\n * A test of source maps on a concatenated, but not minified file.\r\n */\r\nrequire(['app/main']);\r\n\r\n\ndefine(\"app\", function(){});\n"]}